/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FenetreEditeur.java
 *
 * Created on 15 nov. 2012, 14:16:06
 */
package editeur;

import ecouteur.EcouteurEditeur;
import ihm.AireDeJeu;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import moteur.Case;

/**
 *
 * @author disavinr
 */
public class FenetreEditeur extends javax.swing.JFrame {

    /**
     * Hauteur de la fenêtre
     */
    private static final float hauteur = (float) 2 / 3;
    /**
     * Largeur de la fenêtre
     */
    private static final float largeur = (float) 2 / 3;
    private Editeur editeur;

    /**
     * Creates new form FenetreEditeur
     */
    public FenetreEditeur(Editeur e) {
	editeur = e;
	//Taille et position de la fenetre
	Toolkit k = Toolkit.getDefaultToolkit();
	Dimension tailleEcran = k.getScreenSize();
	int largeurEcran = tailleEcran.width;
	int hauteurEcran = tailleEcran.height;
	initComponents();
	setSize((int) (largeurEcran * hauteur), (int) (hauteurEcran * largeur));
//        setLocation((int) (largeurEcran*posX), (int) (hauteurEcran*posY));
	setLocationRelativeTo(getParent());
	EcouteurEditeur ecouteur = new EcouteurEditeur(this);
	aireDeJeu1.addMouseListener(ecouteur);
	initComponents();
	setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aireDeJeu1 = new ihm.AireDeJeu(editeur.getPlateau());
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        creerMap = new javax.swing.JMenuItem();
        chargerMap = new javax.swing.JMenuItem();
        sauverMap = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editeur de carte");

        javax.swing.GroupLayout aireDeJeu1Layout = new javax.swing.GroupLayout(aireDeJeu1);
        aireDeJeu1.setLayout(aireDeJeu1Layout);
        aireDeJeu1Layout.setHorizontalGroup(
            aireDeJeu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 721, Short.MAX_VALUE)
        );
        aireDeJeu1Layout.setVerticalGroup(
            aireDeJeu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 541, Short.MAX_VALUE)
        );

        jMenu1.setText("Fichier");

        creerMap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        creerMap.setText("Créer carte");
        jMenu1.add(creerMap);

        chargerMap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        chargerMap.setText("Charger carte");
        chargerMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargerMapActionPerformed(evt);
            }
        });
        jMenu1.add(chargerMap);

        sauverMap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        sauverMap.setText("Enregistrer carte");
        sauverMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sauverMapActionPerformed(evt);
            }
        });
        jMenu1.add(sauverMap);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aireDeJeu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aireDeJeu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sauverMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sauverMapActionPerformed
	JFileChooser fc = new JFileChooser();
	if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
	    File fichier = fc.getSelectedFile();


	    try {
		FileWriter fw = new FileWriter(fichier);

		if (fw != null) {
		    Case[][] map = aireDeJeu1.getPlateau().get();
		    for (Case[] c1 : map) {
			for (Case c : c1) {
			    System.out.print(c.getTypeTerrain() + " ");
			    fw.write(c.getTypeTerrain() + " ");
			}
			System.out.println("");
			fw.write('\n');

		    }
		}
		fw.flush();
		fw.close();
	    } catch (IOException ex) {
		System.err.println("Fichier non trouvé");
	    }
	}
    }//GEN-LAST:event_sauverMapActionPerformed

    private void chargerMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargerMapActionPerformed
	JFileChooser fc = new JFileChooser();
	if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
	    File fichier = fc.getSelectedFile();

	    if (fichier.exists()) {

		try {
		    FileReader fr = new FileReader(fichier);
		    if (fr != null) {
			Case[][] map = aireDeJeu1.getPlateau().get();
			for (Case[] c1 : map) {
			    for (Case c : c1) {
				//Conversion de ASCII vers entier
				int i = fr.read()-48;
				c.setTypeTerrain(i);
				fr.read();
			    }
			    fr.read();
			}
		    }
		    fr.close();
		} catch (IOException ex) {
		    System.err.println("Fichier non trouvé");
		}

	    }
	}
	aireDeJeu1.repaint();
    }//GEN-LAST:event_chargerMapActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ihm.AireDeJeu aireDeJeu1;
    private javax.swing.JMenuItem chargerMap;
    private javax.swing.JMenuItem creerMap;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem sauverMap;
    // End of variables declaration//GEN-END:variables

    public AireDeJeu getAireDeJeu1() {
	return aireDeJeu1;
    }

    public void choix(Case case1, Case case2) {
	new ChoixTexture(this, case1, case2).setVisible(true);
    }
}
